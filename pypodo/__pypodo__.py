from pathlib import Path

def help():
	help_txt = """\
	
NAME
       pypodo

SYNOPSIS
       pypodo is a todolist program who works with a .todo file at the root of the home directory
       pypodo [MODE] [PARAMETERS]...

       help : display this help
       list : print the todolist with an index for each task, with tag filtered on [PARAMETER]
              pypodo list #print the todolist
              pypodo list linux #print the todolist filtered on tag linux
       add : add [PARAMETER] to the todolist with an index autogenerated
              pypodo add "my first task" #add the task "my first task" to the todolist
       del : delete the task identified with the index equals to [PARAMETER] from the todolist
              pypodo del 3 #deletes the task identified by index equals 3	
       tag : add the tag [PARAMETER[2]] to the task the task identified with the index equals to [PARAMETER[1]]
              pypodo tag 3 linux #add the tag linux to the task identified with the index equals to 3
       untag : delete all tags from the task identified with the index equals to [PARAMETER]
              pypodo untag 3 #deletes all tags frome the task identified by index equals 3
       clear : reorder the todolist in consecutives index
              pypodo clear	
              			
	"""
	print(help_txt)

def list():
	import sys
	check()
	home = str(Path.home())
	if len(sys.argv) > 3:
		sys.exit("error : 0 or 1 parameter needed for pypodo list - the tag")
	vide = 'true'
	with open(home+"/.todo", 'r') as f:
		for line in f.readlines():
			if len(sys.argv) == 2:
				print(line, end = '')
				vide = 'false'	
			elif len(sys.argv) == 3:
				if '#'+sys.argv[2] in line:
					print(line, end = '')
					vide = 'false'
	if vide == 'true':
		if len(sys.argv) == 3:
			print("warning : the filtered todolist is empty")
		else:
			print("warning : the todolist is empty")
							
def add():
	import sys
	check()
	home = str(Path.home())
	if len(sys.argv) != 3:
		sys.exit("error : 1 parameter needed for pypodo add - the task") 
	else:
		vide = 'true'
		with open(home+"/.todo", 'r') as f:
			lines = f.readlines()
		if len(lines) > 0:
			last_line = lines[len(lines)-1]
			index = int(last_line.split()[0])+1
		else:
			index = 1	
		with open(home+"/.todo", 'a') as f:
			f.write(str(index)+" "+sys.argv[2]+'\n')		
			print("info : task added to the todolist - " + str(index)+" "+sys.argv[2])
			vide = 'false'
		if vide == 'true':
			print("warning : no task added to the todolist")	
			
def delete():
	import sys
	import re
	check()
	home = str(Path.home())
	if len(sys.argv) == 3:
		vide = 'true'
		if not re.findall("^\d+$",sys.argv[2]):
			sys.exit("error : 1 parameter needed for pypodo add - the index to delete in numeric format") 
		with open(home+"/.todo", 'r') as f:
			lines = f.readlines()
		with open(home+"/.todo", 'w') as f:	    
			for line in lines:
				if not re.findall("^"+sys.argv[2]+' ',line):
					f.write(line)
				else:
					print("info : task deleted from the todolist - " + line.rstrip('\n'))
					vide = 'false'
		if vide == 'true':
			print("warning : no task deleted from the todolist")					
	else:
		sys.exit("error : 1 parameter needed for pypodo add - the index to delete in numeric format")							

def clear():
	import sys
	import re
	check()
	if len(sys.argv) != 2:
		sys.exit("error : 0 parameter needed for pypodo clear") 
	else:
		vide = 'true'
		index=1
		home = str(Path.home())
		with open(home+"/.todo", 'r') as f:
			lines = f.readlines()
		with open(home+"/.todo", 'w') as f:	    
			for line in lines:
				replaced = re.sub("^\d+ ",str(index)+" ", line)
				index=index+1
				f.write(replaced)
				vide = 'false'
		if vide == 'true':
			print("warning : the todolist is empty - nothing to do")
		else:
			print("info : the todolist is cleared")		
			

def check():
	import sys
	import re
	import os
	index=1
	home = str(Path.home())
	file_exists = os.path.isfile(home+"/.todo") 
	if file_exists:
		with open(home+"/.todo", 'r') as f:
			for line in f.readlines():
				if not re.findall("^\d+ ",line):
					sys.exit("error : verify the .todo file")
	else:
		open(home+"/.todo", "w")

				
def untag():
	import sys
	import re
	check()
	home = str(Path.home())
	if len(sys.argv) == 3:
		vide = 'true'
		if not re.findall("^\d+$",sys.argv[2]):
			sys.exit("1 parameter needed for pypodo untag : the index of the task whose tags to delete")		
		with open(home+"/.todo", 'r') as f:
			lines = f.readlines()
		with open(home+"/.todo", 'w') as f:	    
			for line in lines:
				if not re.findall("^"+sys.argv[2]+' ',line):
					f.write(line)
				if re.findall("^"+sys.argv[2]+' ',line):
					f.write(re.sub(" #.*" ,"", line))
					print("info : tag deleted from the task of the todolist - " + line.rstrip('\n') + " -> " + re.sub(" #.*" ,"", line.rstrip('\n')))
					vide = 'false'
		if vide == 'true':
			print("warning : no tags deleted from the todolist")											
	else:
		sys.exit("1 parameter needed for pypodo untag : the index of the task whose tags to delete")	


def tag():
	import sys
	import re
	check()
	home = str(Path.home())
	if len(sys.argv) == 4:
		if not re.findall("^\d+$",sys.argv[2]):
			sys.exit("2 parameters needed for pypodo tag : the index of the task in numeric format and the tag to added")		
		with open(home+"/.todo", 'r') as f:
			lines = f.readlines()
		vide = 'true'
		with open(home+"/.todo", 'w') as f:	    
			for line in lines:
				if not re.findall("^"+sys.argv[2]+' ',line):
					f.write(line)
				if re.findall("^"+sys.argv[2]+' ',line):
					f.write(line.rstrip('\n')+" #"+sys.argv[3]+"\n")
					print("info : tag added to the task of the todolist - " + line.rstrip('\n') + " -> " + line.rstrip('\n')+" #"+sys.argv[3]) 
					vide = 'false'							
	else:
		sys.exit("2 parameters needed for pypodo tag : the index of the task in numeric format and the tag to added")	

def pypodo():	
	import sys
	if len(sys.argv) == 1:
	    help()
	elif sys.argv[1] == "list":
	    list()
	elif sys.argv[1] == "add":
	    add()
	elif sys.argv[1] == "del":
	    delete()
	elif sys.argv[1] == "clear":
	    clear()    
	elif sys.argv[1] == "help":
	    help()
	elif sys.argv[1] == "untag":
	    untag()
	elif sys.argv[1] == "tag":
	    tag()
	elif sys.argv[1] == "help":
	    tag() 
	else:
	     help()	
	      
