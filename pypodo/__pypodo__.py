from pathlib import Path

def help():
	help_txt = """\
	
NAME
       pypodo

SYNOPSIS
       pypodo is a todolist program who works with a .todo file at the root of the home directory
       pypodo [MODE] [PARAMETERS]...

       help : display this help
       list : print the todolist with an index for each task, with tag filtered on [PARAMETER]
              pypodo list #print the todolist
              pypodo list linux #print the todolist filtered on tag linux
       add : add [PARAMETER]... to the todolist with an index autogenerated
              pypodo add "my first task" "my second task" #add the task "my first task" and the task "my second task" to the todolist
       del : delete tasks identified with the index equals to [PARAMETER]... from the todolist
              pypodo del 3 4 #deletes the task identified by index equals 3 and 4	
       tag : add the tag [PARAMETER[1]] to the task the task identified with the index equals to [PARAMETER[2]]... 
              pypodo tag linux 3 4 #add the tag linux to the task identified with the index equals to 3 and 4
       untag : delete the tag identidied by [PARAMETER1] in the task definied by the [PARAMETER2]...
              pypodo untag linux 3 4 #delete the tag linux from the task identified by index equals 3 and 4
       sort : reorder the todolist in consecutives index
              pypodo sort	
              			
	"""
	print(help_txt)

#liste le .todo éventuellement filtré sur les tags correspondant au paramètre
def list():
	import sys
	import re
	from colorama import Fore, Style
	from termcolor import colored
	check()
	todo = str(Path.home())+"/.todo"
	if len(sys.argv) > 3:
		sys.exit(colored("error : 0 or 1 parameter needed for pypodo list - the tag",'red'))
	vide = 'true'
	with open(todo, 'r') as f:
		for line in f.readlines():
			#sans filtre -> on affiche tout
			if len(sys.argv) == 2:
				task = Fore.GREEN + re.sub("^[^ ]+ ","",line.rstrip('\n'))
				index = Fore.BLUE + line.split(' ', 1)[0]
				tags = Fore.YELLOW + re.sub("^[^#]+ #"," #",re.sub("^[^#]+$","",task))
				print(index +" "+ task + tags)
				vide = 'false'	
			#avec filtre -> on verifie le tag
			elif len(sys.argv) == 3:
				tag=sys.argv[2]
				#regex pour chercher les tags "#toto " ou "#toto" en fin de ligne
				if re.findall("#"+re.escape(tag)+'( |$)',line.rstrip('\n')):
					task = Fore.GREEN + re.sub("^[^ ]+ ","",line.rstrip('\n'))
					index = Fore.BLUE + line.split(' ', 1)[0]
					tags = Fore.YELLOW + re.sub("^[^#]+ #"," #",re.sub("^[^#]+$","",task))
					print(index +" "+ task + tags)
					vide = 'false'
	if vide == 'true':
		if len(sys.argv) == 3:
			print(colored("warning : the filtered todolist is empty","yellow"))
		else:
			print(colored("warning : the todolist is empty","yellow"))
							
#ajoute les taches en parametre à la todolist (en calculant leurs index). 							
def add():
	import sys
	import re
	from termcolor import colored
	check()
	todo = str(Path.home())+"/.todo"
	if len(sys.argv) < 3:
		sys.exit("error : 1 or more parameter needed for pypodo add - tasks") 
	else:
		#boucle sur les index
		for x in range(2, len(sys.argv)): 
			task=sys.argv[x]
			#verification du format : words* #tag1 #tag2 : tache au format libre, tags en un mot précédé de dièse
			if not re.findall("^([^# ])([^#])*( #[^ #]+)*$",task):
				print(colored("warning : the task has not valid format - "+task,"yellow"))
			else: 
				with open(todo, 'r') as f:
					lines = f.readlines()
				#calcul de l'index	
				if len(lines) > 0:
					last_line = lines[len(lines)-1]
					index = int(last_line.split()[0])+1
				else:
					index = 1
				#ajout de la tache à la todolist		
				with open(todo, 'a') as f:
					f.write(str(index)+" "+task+'\n')		
					print(colored("info : task added to the todolist - " + str(index)+" "+task,"green"))	

#supprime les taches dont les index sont fournis en parametre			
def delete():
	import sys
	import re
	from termcolor import colored
	check()
	todo = str(Path.home())+"/.todo"
	if len(sys.argv) >= 3:
		#boucle sur les index
		for x in range(2, len(sys.argv)):
			index=sys.argv[x]
			#verification du format numerique de l index
			if not re.findall("^\d+$",index):
				print(colored("warning : the index to delete is not in numeric format - " + index,"yellow"))
			else:	
				index_existant = 'false' 
				with open(todo, 'r') as f:
					lines = f.readlines()
				with open(todo, 'w') as f:	    
					for line in lines:
						#si la ligne en cours ne contient pas l index elle est conservee
						if not re.findall("^"+index+' ',line):
							f.write(line)
						#sinon elle est supprimee en n etant pas recopiee
						else:
							print(colored("info : task deleted from the todolist - " + line.rstrip('\n'),"green"))
							index_existant = 'true'
				if index_existant == 'false':
					print(colored("warning : no task deleted from the todolist, not existing index - "+ index,"yellow"))					
	else:
		sys.exit(colored("error : 1 or more parameter needed for pypodo add - indexes to delete in numeric format","red"))							

#retri la liste en ordre croissant successifs
def sort():
	import sys
	import re
	from termcolor import colored
	check()
	if len(sys.argv) != 2:
		sys.exit(colored("error : 0 parameter needed for pypodo sort","red")) 
	else:
		vide = 'true'
		index=1
		todo = str(Path.home())+"/.todo"
		with open(todo, 'r') as f:
			lines = f.readlines()
		with open(todo, 'w') as f:	    
			for line in lines:
				#on remplace l index existant par l index courant qu on incremente
				replaced = re.sub("^\d+ ",str(index)+" ", line)
				index=index+1
				f.write(replaced)
				vide = 'false'
		if vide == 'true':
			print(colored("warning : the todolist is empty - nothing to do","yellow"))
		else:
			print(colored("info : the todolist is sorted","green"))		
			
#verifications diverses sur le fichier todo
def check():
	import sys
	import re
	import os
	from termcolor import colored
	index=1
	todo = str(Path.home())+"/.todo"
	file_exists = os.path.isfile(todo) 
	if file_exists:
		with open(todo, 'r') as f:
			error = 'false'
			for line in f.readlines():
				#regex de verification, index + tache + tags eventuels
				if not re.findall("^\d+ ([^#])+( #[^ #]+)*$",line.rstrip('\n')):
					print(colored("warning : this line has not valid format in .todo - "+line.rstrip('\n'),"yellow"))
					error = 'true'
		if error == 'true':
			sys.exit(colored("error : verify the .todo file","red"))			
	else:
		open(todo, "w")

#untag de taches				
def untag():
	import sys
	import re
	from termcolor import colored
	check()
	todo = str(Path.home())+"/.todo"
	if len(sys.argv) >= 4:
		tag=sys.argv[2]
		if not re.findall("^[^ #]+$",tag):
			sys.exit(colored("error : the tag has non valid format - "+tag,"red"))		
		#boucle sur les index
		for x in range(3, len(sys.argv)):
			index=sys.argv[x]
			if not re.findall("^\d+$",index):
				print(colored("warning : the index to untag is not in numeric format - " + index,"yellow"))
			else:	
				index_trouve = 'false'
				with open(todo, 'r') as f:
					lines = f.readlines()
				with open(todo, 'w') as f:	    
					for line in lines:
						if not re.findall("^"+index+' ',line):
							f.write(line)
						if re.findall("^"+index+' ',line):
							if re.findall("#"+re.escape(tag)+'( |$)',line.rstrip('\n')):
								f.write(re.sub("#"+re.escape(tag)+'( |$)' ,"", line).rstrip('\n').rstrip()+'\n')
								print(colored("info : tag deleted from the task of the todolist - " + line.rstrip('\n') + " -> " + re.sub("#"+re.escape(tag)+'( |$)',"", line.rstrip('\n')),"green"))
							else:
								f.write(line)
								print(colored("warning : no tags deleted from the todolist for the task - "+line.rstrip('\n'),"yellow"))	
							index_trouve = 'true'
				if index_trouve == 'false':
					print(colored("warning : no task with index - "+index,"yellow"))											
	else:
		sys.exit(colored("error : 1 parameter needed for pypodo untag : the index of the task whose tags to delete","red"))	


#tag des taches
def tag():
	import sys
	import re
	from termcolor import colored
	check()
	todo = str(Path.home())+"/.todo"
	if len(sys.argv) >= 4:
		tag=sys.argv[2]
		if not re.findall("^[^ #]+$",tag):
			print(colored("error : the tag has non valid format - "+tag,'red'))
			sys.exit()		
		
		#boucle sur les index		
		for x in range(3, len(sys.argv)):
			index=sys.argv[x]		
			if not re.findall("^\d+$",index):
				print(colored("warning : the index to yag is not in numeric format - " + index,"yellow"))
			else:	
				index_trouve = 'false'
				with open(todo, 'r') as f:
					lines = f.readlines()
				with open(todo, 'w') as f:	    
					for line in lines:
						if not re.findall("^"+index+' ',line):
							f.write(line)
						if re.findall("^"+index+' ',line):
							f.write(line.rstrip('\n')+" #"+tag+"\n")
							print(colored("info : tag added to the task of the todolist - " + line.rstrip('\n') + " -> " + line.rstrip('\n')+" #"+tag,"green")) 
							index_trouve = 'true'	
				if index_trouve == 'false':
					print(colored("warning : no task with number in the todolist - "+index,"yellow"))										
	else:
		sys.exit(colored("error : 2 or more parameters needed for pypodo tag : the tag to added and indexes of the task in numeric format","red"))	

def pypodo():	
	import sys
	if len(sys.argv) == 1:
	    help()
	elif sys.argv[1] == "list":
	    list()
	elif sys.argv[1] == "add":
	    add()
	elif sys.argv[1] == "del":
	    delete()
	elif sys.argv[1] == "sort":
	    sort()    
	elif sys.argv[1] == "help":
	    help()
	elif sys.argv[1] == "untag":
	    untag()
	elif sys.argv[1] == "tag":
	    tag()
	elif sys.argv[1] == "help":
	    help() 
	else:
	     help()	
	      
